{"ast":null,"code":"var _jsxFileName = \"D:\\\\Nitin\\\\covid19tracker\\\\src\\\\components\\\\Chart\\\\Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Charts = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    }; //console.log(dailyData);\n\n\n    fetchAPI();\n  }, []);\n  const lineChart = dailyData.length != 0 ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255,0,0,0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\n        data: [confirmed, recovered, deaths]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }\n  }, country ? barChart : lineChart);\n};\n\nexport default Charts;","map":{"version":3,"sources":["D:/Nitin/covid19tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Charts","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAG;AAACC,IAAAA,SAAD;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,GAAR;AAAyCC,EAAAA;AAAzC,CAAD,KAAsD;AAEpE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA2Bb,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACd,UAAMa,QAAQ,GAAG,YAAY;AAC5BD,MAAAA,YAAY,EAAE,MAAMX,cAAc,EAAtB,EAAZ;AACA,KAFD,CADc,CAKd;;;AACAY,IAAAA,QAAQ;AACR,GAPQ,EAOP,EAPO,CAAT;AASA,QAAMC,SAAS,GACbH,SAAS,CAACI,MAAV,IAAoB,CAArB,gBACC,oBAAC,IAAD;AACA,IAAA,IAAI,EAAG;AACNC,MAAAA,MAAM,EAAGL,SAAS,CAACM,GAAV,CAAc,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAYA,IAA1B,CADH;AAENC,MAAAA,QAAQ,EAAE,CAAC;AACVb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADI;AAEVa,QAAAA,KAAK,EAAE,UAFG;AAGVC,QAAAA,WAAW,EAAE,SAHH;AAIVC,QAAAA,IAAI,EAAE;AAJI,OAAD,EAKN;AACHhB,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAER,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADH;AAEHW,QAAAA,KAAK,EAAE,QAFJ;AAGHC,QAAAA,WAAW,EAAE,KAHV;AAIHE,QAAAA,eAAe,EAAE,mBAJd;AAKHD,QAAAA,IAAI,EAAE;AALH,OALM;AAFJ,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAmBM,IApBP;AAwBA,QAAME,QAAQ,GACbjB,SAAS,gBAER,oBAAC,GAAD;AACC,IAAA,IAAI,EAAE;AACLS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAc,WAAd,EAA4B,QAA5B,CADH;AAELG,MAAAA,QAAQ,EAAE,CAAC;AACVC,QAAAA,KAAK,EAAG,QADE;AAEVG,QAAAA,eAAe,EAAE,CAAC,mBAAD,EAAsB,mBAAtB,EAA2C,mBAA3C,CAFP;AAGVjB,QAAAA,IAAI,EAAE,CAAEC,SAAF,EAAaC,SAAb,EAAyBC,MAAzB;AAHI,OAAD;AAFL,KADP;AASC,IAAA,OAAO,EAAE;AACRgB,MAAAA,MAAM,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV,OADA;AAERC,MAAAA,KAAK,EAAE;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAkBE,QAAAA,IAAI,EAAG,oBAAmBlB,OAAQ;AAApD;AAFC,KATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFQ,GAgBN,IAjBJ;AAqBA,sBACC;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACyB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEnB,OAAO,GAAGc,QAAH,GAAaV,SADtB,CADD;AAMA,CAhED;;AAkEA,eAAeT,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css'; \r\n\r\nconst Charts = ({data : {confirmed, recovered, deaths} , country}) =>{\r\n\t\r\n\tconst [dailyData, setDailyData]= useState([]); \r\n\t\r\n\tuseEffect(() =>{\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetDailyData( await fetchDailyData());\r\n\t\t}\r\n\t\t\r\n\t\t//console.log(dailyData);\r\n\t\tfetchAPI();\r\n\t},[]);\r\n\t\r\n\tconst lineChart = (\r\n\t\t(dailyData.length != 0) ? \r\n\t\t(<Line \r\n\t\t\tdata ={{\r\n\t\t\t\tlabels:  dailyData.map(({date }) =>date ),\r\n\t\t\t\tdatasets: [{\r\n\t\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed ), \r\n\t\t\t\t\tlabel: 'Infected',\r\n\t\t\t\t\tborderColor: '#3333ff',\r\n\t\t\t\t\tfill: true,\r\n\t\t\t\t} , {\r\n\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths ), \r\n\t\t\t\t\tlabel: 'Deaths',\r\n\t\t\t\t\tborderColor: 'red',\r\n\t\t\t\t\tbackgroundColor: 'rgba(255,0,0,0.5)', \r\n\t\t\t\t\tfill: true,\r\n\t\t\t\t\t\r\n\t\t\t\t}],\r\n\t\t\t\t\r\n\t\t\t}}\r\n\t\t/>) : null\r\n\t\r\n\t);\r\n\t\r\n\tconst barChart = (\r\n\t\tconfirmed \r\n\t\t? (\r\n\t\t\t<Bar \r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels: ['Infected' , 'Recovered' , 'Deaths'],\r\n\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\tlabel:  'People',\r\n\t\t\t\t\t\tbackgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n\t\t\t\t\t\tdata: [ confirmed, recovered , deaths]\r\n\t\t\t\t\t}] \r\n\t\t\t\t}}\r\n\t\t\t\toptions={{\r\n\t\t\t\t\tlegend: {display: false },\r\n\t\t\t\t\ttitle: { display: true , text: `Current State in ${country}`}\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t): null\r\n\t) \r\n\t\r\n\t\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t{country ? barChart :lineChart}\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default Charts;"]},"metadata":{},"sourceType":"module"}